#Git — это распределенная система контроля версий

Система контрля версий служит для хранения файлов, отслеживания их состояния и фиксирования любых изменений.
Т.е. с помощью гит можно регистрировать изменений в одном/нескольких файлах для того чтобы в дальнейшем была возможность вернуться к определенным, старым версиям (откатить изменения).

#Немного теории
Коммит — фиксация изменений / запись изменений в репозиторий
Ветка — параллельная версия репозитория, кот включена в него, но не влияет на главную версию
Pull - получение последних имененийиз ветки remote repo
Push - отправка всех неотправленных коммитов на remote repo
Merge - слияние изменений из к-л ветки репозитория с другой веткой этого же репозитория

#Состояния в Гит
- неотслеживаемое (untracked); //Файл, который создан и не добавлен в репозиторий
- измененное (modified); //Делаем изменения в файлах, которые уже добавлены в гит репозиторий
- подготовленное (staged); //Из тех файлов, которые мы изменили, выбираем только те (или все), которые нужны нам, и эти файлы с изменениями попадают в состояние staged
- закомиченное (committed). //Из заготовленных файлов из состояния staged создается коммит и переходит уже в гит репозиторий

#Добавить файлы в состояние staged
$ git add -A //добавить все файлы из состояния в staged;
$ git add . //добавить все файлы из этой папки и все внутренних. По сути тоже самое, что и предыдущее;
$ git add <имя файла> //добавляет только конкретный файл.

#Проверить статус
$ git status

#Посмотреть историю коммитов в ветке
$ git log

#Проверить изменения в файле
$ git diff

#Посмотреть список всех веток в репозитории и понять, на какой находишься
$ git branch -a

#Создать ветку и переключиться на нее
$ git checkout -b dev

#Переход на ветку
$ git checkout master

#Первоначальная настройка
$ git config --global user.name "[имя]" //Устанавливает имя, которое будет отображаться в поле автора у выполняемых вами коммитов
$ git config --global user.email "[адрес электронной почты]" //Устанавливает адрес электронной почты, который будет отображаться в информации о выполняемых вами коммитах

#Создание репозитория
$ git init [название проекта] //Создаёт новый локальный репозиторий с заданным именем
$ git clone [url-адрес] //Скачивает репозиторий вместе со всей его историей изменений

#Внесение изменений
$ git status //Перечисляет все новые или изменённые файлы, которые нуждаются в фиксации
$ git diff //Показывает различия по внесённым изменениям в ещё не проиндексированных файлах
$ git add [файл] //Индексирует указанный файл для последующего коммита
$ git diff --staged //Показывает различия между проиндексированной и последней зафиксированной версиями файлов
$ git reset [файл] //Отменяет индексацию указанного файла, при этом сохраняет его содержимое
$ git commit -m "[сообщение с описанием]" //Фиксирует проиндексированные изменения и сохраняет их в историю версий

#Работа с ветками
$ git branch //Список именованных веток коммитов с указанием выбранной ветки
$ git branch [имя ветки] //Создаёт новую ветку
$ git switch -c [имя ветки] //Переключается на выбранную ветку и обновляет рабочую директорию до её состояния
$ git merge [имя ветки] //Вносит изменения указанной ветки в текущую ветку
$ git branch -d [имя ветки] //Удаляет выбранную ветку

#Синхронизация с удалённым репозиторием
$ git fetch [удалённый репозиторий] //Скачивает всю историю из удалённого репозитория
$ git merge [удалённый репозиторий]/[ветка] //Вносит изменения из ветки удалённого репозитория в текущую ветку локального репозитория
$ git push [удалённый репозиторий] [ветка] //Загружает все изменения локальной ветки в удалённый репозиторий
$ git pull //Загружает историю из удалённого репозитория и объединяет её с локальной. pull = fetch + merge

#Откат коммитов
$ git reset [коммит] //Отменяет все коммиты после заданного, оставляя все изменения в рабочей директории
$ git reset --hard [коммит] //Сбрасывает всю историю вместе с состоянием рабочей директории до указанного коммита.

#Операции с файлами
$ git rm [файл] //Удаляет конкретный файл из рабочей директории и индексирует его удаление
$ git rm --cached [файл] //Убирает конкретный файл из контроля версий, но физически оставляет его на своём месте
$ git mv [оригинальный файл] [новое имя] //Перемещает и переименовывает указанный файл, сразу индексируя его для последующего коммита

#Игнорирование некоторых файлов
*.log
build/
temp-*
//Git будет игнорировать файлы и директории, перечисленные в файле .gitignore с помощью wildcard синтаксиса

$ git ls-files --others --ignored --exclude-standard //Список всех игнорируемых файлов в текущем проекте

#Сохранение фрагментов
$ git stash //Временно сохраняет все незафиксированные изменения отслеживаемых файлов
$ git stash pop //Восстанавливает состояние ранее сохранённых версий файлов
$ git stash list //Выводит список всех временных сохранений
$ git stash drop //Сбрасывает последние временно сохранённыe изменения

#Просмотр истории
$ git log //История коммитов для текущей ветки
$ git log --follow [файл] //История изменений конкретного файла, включая его переименование
$ git diff [первая ветка]...[вторая ветка] //Показывает разницу между содержанием коммитов двух веток
$ git show [коммит] //Выводит информацию и показывает изменения в выбранном коммите

